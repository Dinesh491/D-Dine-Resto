<% layout("/layouts/boilerplate") %>


<div class="checkout-background">
    <div class="order-page">
        <div class="order-page-content">
    <h4>Order Items</h4>
    <hr>

    <% for(let item of cartDetails) { %>    
        <div class="order-item-card"  data-id="<%= item.id %>">
            <div class="order-item-info">
                <% if (item.type === "veg") { %>
                    <div class="veg-symbol s">
                        <div class="circle"></div>
                    </div>
                <% } else { %>
                    <div class="nonVeg-symbol s">
                        <div class="triangle"></div>
                    </div>
                <% } %>
                <h6 class="order-item-name"><%= item.name %></h6>
            </div>
            <div class="image-container">
                <div class="counter order-cou">
                    <button class="decrement order-dec">-</button>
                    <span class="quantity order-qua"><%= item.quantity %></span>
                    <button class="increment order-inc">+</button>
                </div>
            </div>
            <div>
                <span class="item-cost">
                    <span class="hidden-item-cost"><%= item.price %></span>
                    <span class="total-item-cost">&#8377;<%= item.price * item.quantity %></span>
                </span>
            </div>
        </div>
    <% } %>

    <div class="form-floating">
        <textarea class="form-control" placeholder="Leave a comment here" id="order-text" style="height: 50px"></textarea>
        <label for="order-text" id="order-text-label"><span class="upper-comma">&ldquo;</span>&nbsp; Any suggestions to our chefs ?...</label>
      </div>

      <h6>Bill Details</h6>

      <div class="item-total-and-price Bill">
        <div class="item-total">Item Total</div>
        <div class="item-total-price" id="grand-total">&#8377; <%= grandTotal %></div>
      </div>
      
      <div class="gst Bill">
        <div class="gst-text">GST & Other Charges</div>
        <div class="gst-price" id="gst-amount">&#8377; <%= gstAmount %></div>
      </div>

      <hr>

      <div class="grand-total Bill">
        <h6 class="grand-total-text">TO PAY</h6>
        <h6 class="grand-total-price" id="final-amount">&#8377; <%= finalAmount %></h6>
      </div>


      <hr>

      <div class="form-floating">
        <input class="form-control"placeholder="Enter Your Table Number" id="table-number" type="number" placeholder="Pls" style="height: 50px">
        <label style="color: #6d6b6b;" for="table-number" id="table-number-label"><span class="upper-comma">&ldquo;</span>&nbsp;Pls Enter Your Table Number carefully....</label>
      </div>
      

      
        
            <div class="order-btn-div">
          <button class="btn order-btn">
            <span class="fire-emoji">ðŸ”¥</span>&nbsp;&nbsp;&nbsp;&nbsp;
            <span class="order-btn-span" style="font-weight: 600;">Fire Up the Kitchen</span>
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <i class="fas fa-utensils utensils-icon" style="color: aliceblue;"></i>
          </button>
        </div>
        

    </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function() {
        
        
        let counters = document.querySelectorAll(".order-cou");

        counters.forEach(counter => {
            const quantitySpan = counter.querySelector(".order-qua");
            const incrementBtn = counter.querySelector(".order-inc");
            const decrementBtn = counter.querySelector(".order-dec");
            const parentCard = counter.closest(".order-item-card");
            const totalPriceOfItem = parentCard.querySelector(".total-item-cost");
            const pricePerItem = parentCard.querySelector(".hidden-item-cost");
            const itemId = parentCard.dataset.id;

            incrementBtn.addEventListener("click", async() => {

                let currentQuantity = parseInt(quantitySpan.textContent, 10);
                quantitySpan.textContent = currentQuantity + 1;

                let price = parseInt(pricePerItem.textContent);
                totalPriceOfItem.textContent = `â‚¹${(price * (currentQuantity + 1))}`;
                

                await updateSession(itemId, currentQuantity + 1);
                recalculateTotals();
            });

            decrementBtn.addEventListener("click", async() => {
                let currentQuantity = parseInt(quantitySpan.textContent, 10);

                if(currentQuantity > 1){
                    quantitySpan.textContent = currentQuantity - 1;
                    let price = parseInt(pricePerItem.textContent);
                    totalPriceOfItem.textContent = `â‚¹${(price * (currentQuantity - 1))}`;
                    await updateSession(itemId, currentQuantity - 1);
                }
                else
                 {
        // Remove item from DOM when quantity becomes 0
                     parentCard.remove();
                     await updateSession(itemId, 0);
                    }
                    recalculateTotals();
            })
        });

        // Function to send POST request to update session
    async function updateSession(id, quantity) {
        try {
            const response = await fetch("/session", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ id, quantity }),
            });
            const data = await response.json();
            console.log("Session updated:", data);
        } catch (error) {
            console.error("Error updating session:", error);
        }
    }

    function recalculateTotals() {

        
        if (document.querySelectorAll(".order-item-card").length === 0) {
    showEmptyCartAlert();
}
        let total = 0;
        document.querySelectorAll(".order-item-card").forEach(card => {
            const quantity = parseInt(card.querySelector(".order-qua").textContent, 10);
            const price = parseInt(card.querySelector(".hidden-item-cost").textContent);
            total += price * quantity;
        });

        const gstPercentage = 5;
        const gst = Math.round((total * gstPercentage) / 100);

        const final = total + gst;
        
        document.getElementById("grand-total").textContent = `â‚¹${total}`;
        document.getElementById("gst-amount").textContent = `â‚¹${gst}`;
    document.getElementById("final-amount").textContent = `â‚¹${final}`;
    }

    function showEmptyCartAlert() {
    Swal.fire({
        icon: 'warning',
        title: 'Cart is empty!',
        text: 'Please add items before placing your order.',
        confirmButtonColor: '#d33',
        customClass: {
            popup: 'custom-alert'
        }
    }).then((result) => {
        if (result.isConfirmed) {
            window.location.href = "/dineIn";
        }
    });
}



    let orderBtn = document.querySelector(".order-btn");

orderBtn.addEventListener("click", async () => {

    let itemCards = document.querySelectorAll(".order-item-card");
    if (itemCards.length === 0) {
    Swal.fire({
    icon: 'warning',
    title: 'Cart is empty!',
    text: 'Please add items before placing your order.',
    confirmButtonColor: '#d33',
    customClass: {
        popup: 'custom-alert'
    }
}).then((result) => {
    if (result.isConfirmed) {
        // Redirect based on current path
        if (window.location.pathname.includes("/dineIn")) {
            window.location.href = "/dineIn";
        } else {
            window.location.href = "/delivery";
        }
    }
});

}

    
    // Parse the final amount price to a number
    let finalAmountPrice = parseFloat(document.getElementById("final-amount").textContent.replace("â‚¹", ""));

    let path = "";
    let tableText = document.getElementById("table-number").value.trim();
    

    let orderText = document.getElementById("order-text").value.trim();

       let tableNumber = parseInt(tableText, 10);
    // Define currentPath if not already defined
    let currentPath = window.location.pathname;

    if (currentPath.includes("/dineIn")) {
        path = "dineIn";
    } else {
        path = "delivery";
    }
    console.log("path:", path); // Add this line to verify the value

    let itemTotal = parseFloat(document.getElementById("grand-total").textContent.replace("â‚¹", ""));
    let gstAmount = parseFloat(document.getElementById("gst-amount").textContent.replace("â‚¹", ""));


    await placeOrder(finalAmountPrice, path, tableNumber, orderText, itemTotal, gstAmount);
});

async function placeOrder(finalAmount, orderType, tableNumber, orderText, itemTotal, gstAmount) {
    let itemCards = document.querySelectorAll(".order-item-card");
   if ((isNaN(tableNumber)) && (itemCards.length != 0)) {
    Swal.fire({
    icon: 'warning',
    title: 'Missing Table Number',
    text: 'Please enter your table number before placing the order.',
    confirmButtonColor: '#d33',
    customClass: {
        popup: 'custom-alert'
    }
}).then(() => {
    // Allow for enough time for SweetAlert to close
    setTimeout(() => {
        // Use setTimeout to delay focus after modal close
        const tableNumberInput = document.getElementById("table-number");
        
        if (tableNumberInput) {
            // Ensure the element is visible and can be focused
            tableNumberInput.focus();

            // Debugging: log focus event to see if focus is set correctly
            console.log('Focus set on table number input');
        } else {
            console.error('Table number input not found!');
        } 
    }, 300); // 300ms delay to allow modal transition to complete
});


    return;
}


    if (orderText === "") {
    orderText = "Empty";
}

    try {
        const response = await fetch("/dineInSave", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ finalAmount, orderType, tableNumber, orderText, itemTotal, gstAmount }),
        });

        const data = await response.json();
        
        if (data.redirectTo) {
    // After clicking order button:
sessionStorage.setItem("orderStartTime", Date.now());
sessionStorage.setItem("showOrderBar", "true");
sessionStorage.removeItem("barPhase");
sessionStorage.setItem('orderType', 'dineIn');

window.location.reload();


window.location.href = data.redirectTo;
}


    } catch (error) {
        console.error("Error updating session:", error);
    }
}

    });
</script>